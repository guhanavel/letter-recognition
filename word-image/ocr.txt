def transpose(matrix):
    new_matrix = [] * len(matrix[0])
    for m in range(len(matrix)):
        for i in range(len(matrix[m])):
            if len(new_matrix) <= i:
                new_matrix.append([matrix[m][i]])
            else:
                new_matrix[i].append(matrix[m][i])
    matrix.clear()
    for m in new_matrix:
        matrix.append(m)
    return matrix

To get a rectangular structure:

APPLE BALL BANANA ORANGE


def sort_contours(cnts, method):
     # initialize the reverse flag and sort index
                reverse = False
                i = 0
                # handle if we need to sort in reverse
                if method == "right-to-left" or method == "bottom-to-top":
                        reverse = True
                # handle if we are sorting against the y-coordinate rather than
                # the x-coordinate of the bounding box
                if method == "top-to-bottom" or method == "bottom-to-top":
                        i = 1
                # construct the list of bounding boxes and sort them from top to
                # bottom
                boundingBoxes = [cv2.boundingRect(c) for c in cnts]
                (cnts, boundingBoxes) = zip(*sorted(zip(cnts, boundingBoxes),
                        key=lambda b:b[1][i], reverse=reverse))
                # return the list of sorted contours and bounding boxes
                return (cnts, boundingBoxes)[0]
